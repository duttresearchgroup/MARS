/*******************************************************************************
 * Copyright (C) 2019 Saehanseul Yi <saehansy@uci.edu>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

#ifndef __NVIDIA_COUNTERS_H__
#define __NVIDIA_COUNTERS_H__

#include <stdint.h> // uint64_t

#define MAX_KERNEL_PER_POLICY_MANAGER 10
#define MAX_METRICS_PER_POLICY_MANAGER 64
#define MAX_METRICS 256

typedef union metric_result_value_st {
    long long llres;
    unsigned long long ullres;
    float fres;
    double dres;
} metric_result_value_t;

typedef struct metric_result_st {
    int type;
    metric_result_value_t val;
} metric_result_t;

typedef struct kernel_data_st {
    char name[128];
    void *ptr;
    int num_launched;	// in case kernel launches more than twice during a sample window 
    uint64_t pure_kernel_duration; // ns
    uint64_t kernel_duration; // pure_kernel_duration + launching overhead
    double mres[MAX_METRICS]; // metric result
} kernel_data_t;

struct shm_hookcuda {
    bool init;
    int num_kernels;
    kernel_data_t kernels[MAX_KERNEL_PER_POLICY_MANAGER];

    // from cupti_wrapper_arg_t
    int verbose;
    int exact_kernel_duration;
    int sampling_mode;
    int num_metrics;
    int metrics[MAX_METRICS_PER_POLICY_MANAGER];
};

#define NV_CTR_NAME(x) nvidia_counters_name[x]

enum nvidia_counters_type {
    VALUE_KIND_DOUBLE, 
    VALUE_KIND_UINT64, 
    VALUE_KIND_INT64, 
    VALUE_KIND_PERCENT, 
    VALUE_KIND_THROUGHPUT, 
    VALUE_KIND_UTILIZATION_LEVEL,
    VALUE_KIND_MAX,
};

enum cupti_sampling_type_t {
    EVENT_COLLECTION_MODE_KERNEL,
    EVENT_COLLECTION_MODE_CONTINUOUS,
    EVENT_COLLECTION_MODE_MAX,
};

// aggregate metrics from compute capability 3.x-7.x
enum nvidia_counters_t {
    ACHIEVED_OCCUPANCY,
    ALU_FU_UTILIZATION,
    ATOMIC_REPLAY_OVERHEAD,
    ATOMIC_THROUGHPUT,
    ATOMIC_TRANSACTIONS,
    ATOMIC_TRANSACTIONS_PER_REQUEST,
    BRANCH_EFFICIENCY,
    CF_EXECUTED,
    CF_FU_UTILIZATION,
    CF_ISSUED,
    DOUBLE_PRECISION_FU_UTILIZATION,
    DRAM_READ_BYTES,
    DRAM_READ_THROUGHPUT,
    DRAM_READ_TRANSACTIONS,
    DRAM_UTILIZATION,
    DRAM_WRITE_BYTES,
    DRAM_WRITE_THROUGHPUT,
    DRAM_WRITE_TRANSACTIONS,
    ECC_THROUGHPUT,
    ECC_TRANSACTIONS,
    ELIGIBLE_WARPS_PER_CYCLE,
    FLOP_COUNT_DP,
    FLOP_COUNT_DP_ADD,
    FLOP_COUNT_DP_FMA,
    FLOP_COUNT_DP_MUL,
    FLOP_COUNT_HP,
    FLOP_COUNT_HP_ADD,
    FLOP_COUNT_HP_FMA,
    FLOP_COUNT_HP_MUL,
    FLOP_COUNT_SP,
    FLOP_COUNT_SP_ADD,
    FLOP_COUNT_SP_FMA,
    FLOP_COUNT_SP_MUL,
    FLOP_COUNT_SP_SPECIAL,
    FLOP_DP_EFFICIENCY,
    FLOP_HP_EFFICIENCY,
    FLOP_SP_EFFICIENCY,
    GLD_EFFICIENCY,
    GLD_REQUESTED_THROUGHPUT,
    GLD_THROUGHPUT,
    GLD_TRANSACTIONS,
    GLD_TRANSACTIONS_PER_REQUEST,
    GLOBAL_ATOMIC_REQUESTS,
    GLOBAL_CACHE_REPLAY_OVERHEAD,
    GLOBAL_HIT_RATE,
    GLOBAL_LOAD_REQUESTS,
    GLOBAL_REDUCTION_REQUESTS,
    GLOBAL_REPLAY_OVERHEAD,
    GLOBAL_STORE_REQUESTS,
    GST_EFFICIENCY,
    GST_REQUESTED_THROUGHPUT,
    GST_THROUGHPUT,
    GST_TRANSACTIONS,
    GST_TRANSACTIONS_PER_REQUEST,
    HALF_PRECISION_FU_UTILIZATION,
    INST_BIT_CONVERT,
    INST_COMPUTE_LD_ST,
    INST_CONTROL,
    INST_EXECUTED,
    INST_EXECUTED_GLOBAL_ATOMICS,
    INST_EXECUTED_GLOBAL_LOADS,
    INST_EXECUTED_GLOBAL_REDUCTIONS,
    INST_EXECUTED_GLOBAL_STORES,
    INST_EXECUTED_LOCAL_LOADS,
    INST_EXECUTED_LOCAL_STORES,
    INST_EXECUTED_SHARED_ATOMICS,
    INST_EXECUTED_SHARED_LOADS,
    INST_EXECUTED_SHARED_STORES,
    INST_EXECUTED_SURFACE_ATOMICS,
    INST_EXECUTED_SURFACE_LOADS,
    INST_EXECUTED_SURFACE_REDUCTIONS,
    INST_EXECUTED_SURFACE_STORES,
    INST_EXECUTED_TEX_OPS,
    INST_FP_16,
    INST_FP_32,
    INST_FP_64,
    INST_INTEGER,
    INST_INTER_THREAD_COMMUNICATION,
    INST_ISSUED,
    INST_MISC,
    INST_PER_WARP,
    INST_REPLAY_OVERHEAD,
    IPC,
    IPC_INSTANCE,
    ISSUED_IPC,
    ISSUE_SLOTS,
    ISSUE_SLOT_UTILIZATION,
    L1_CACHE_GLOBAL_HIT_RATE,
    L1_CACHE_LOCAL_HIT_RATE,
    L1_SHARED_UTILIZATION,
    L2_ATOMIC_THROUGHPUT,
    L2_ATOMIC_TRANSACTIONS,
    L2_GLOBAL_ATOMIC_STORE_BYTES,
    L2_GLOBAL_LOAD_BYTES,
    L2_GLOBAL_REDUCTION_BYTES,
    L2_L1_READ_HIT_RATE,
    L2_L1_READ_THROUGHPUT,
    L2_L1_READ_TRANSACTIONS,
    L2_L1_WRITE_THROUGHPUT,
    L2_L1_WRITE_TRANSACTIONS,
    L2_LOCAL_GLOBAL_STORE_BYTES,
    L2_LOCAL_LOAD_BYTES,
    L2_READ_THROUGHPUT,
    L2_READ_TRANSACTIONS,
    L2_SURFACE_ATOMIC_STORE_BYTES,
    L2_SURFACE_LOAD_BYTES,
    L2_SURFACE_REDUCTION_BYTES,
    L2_SURFACE_STORE_BYTES,
    L2_TEX_HIT_RATE,
    L2_TEX_READ_HIT_RATE,
    L2_TEX_READ_THROUGHPUT,
    L2_TEX_READ_TRANSACTIONS,
    L2_TEX_WRITE_HIT_RATE,
    L2_TEX_WRITE_THROUGHPUT,
    L2_TEX_WRITE_TRANSACTIONS,
    L2_UTILIZATION,
    L2_WRITE_THROUGHPUT,
    L2_WRITE_TRANSACTIONS,
    LDST_EXECUTED,
    LDST_FU_UTILIZATION,
    LDST_ISSUED,
    LOCAL_HIT_RATE,
    LOCAL_LOAD_REQUESTS,
    LOCAL_LOAD_THROUGHPUT,
    LOCAL_LOAD_TRANSACTIONS,
    LOCAL_LOAD_TRANSACTIONS_PER_REQUEST,
    LOCAL_MEMORY_OVERHEAD,
    LOCAL_REPLAY_OVERHEAD,
    LOCAL_STORE_REQUESTS,
    LOCAL_STORE_THROUGHPUT,
    LOCAL_STORE_TRANSACTIONS,
    LOCAL_STORE_TRANSACTIONS_PER_REQUEST,
    NC_CACHE_GLOBAL_HIT_RATE,
    NC_GLD_EFFICIENCY,
    NC_GLD_REQUESTED_THROUGHPUT,
    NC_GLD_THROUGHPUT,
    NC_L2_READ_THROUGHPUT,
    NC_L2_READ_TRANSACTIONS,
    NVLINK_OVERHEAD_DATA_RECEIVED,
    NVLINK_OVERHEAD_DATA_TRANSMITTED,
    NVLINK_RECEIVE_THROUGHPUT,
    NVLINK_TOTAL_DATA_RECEIVED,
    NVLINK_TOTAL_DATA_TRANSMITTED,
    NVLINK_TOTAL_NRATOM_DATA_TRANSMITTED,
    NVLINK_TOTAL_RATOM_DATA_TRANSMITTED,
    NVLINK_TOTAL_RESPONSE_DATA_RECEIVED,
    NVLINK_TOTAL_WRITE_DATA_TRANSMITTED,
    NVLINK_TRANSMIT_THROUGHPUT,
    NVLINK_USER_DATA_RECEIVED,
    NVLINK_USER_DATA_TRANSMITTED,
    NVLINK_USER_NRATOM_DATA_TRANSMITTED,
    NVLINK_USER_RATOM_DATA_TRANSMITTED,
    NVLINK_USER_RESPONSE_DATA_RECEIVED,
    NVLINK_USER_WRITE_DATA_TRANSMITTED,
    PCIE_TOTAL_DATA_RECEIVED,
    PCIE_TOTAL_DATA_TRANSMITTED,
    SHARED_EFFICIENCY,
    SHARED_LOAD_THROUGHPUT,
    SHARED_LOAD_TRANSACTIONS,
    SHARED_LOAD_TRANSACTIONS_PER_REQUEST,
    SHARED_REPLAY_OVERHEAD,
    SHARED_STORE_THROUGHPUT,
    SHARED_STORE_TRANSACTIONS,
    SHARED_STORE_TRANSACTIONS_PER_REQUEST,
    SHARED_UTILIZATION,
    SINGLE_PRECISION_FU_UTILIZATION,
    SM_EFFICIENCY,
    SM_EFFICIENCY_INSTANCE,
    SPECIAL_FU_UTILIZATION,
    STALL_CONSTANT_MEMORY_DEPENDENCY,
    STALL_EXEC_DEPENDENCY,
    STALL_INST_FETCH,
    STALL_MEMORY_DEPENDENCY,
    STALL_MEMORY_THROTTLE,
    STALL_NOT_SELECTED,
    STALL_OTHER,
    STALL_PIPE_BUSY,
    STALL_SLEEPING,
    STALL_SYNC,
    STALL_TEXTURE,
    SURFACE_ATOMIC_REQUESTS,
    SURFACE_LOAD_REQUESTS,
    SURFACE_REDUCTION_REQUESTS,
    SURFACE_STORE_REQUESTS,
    SYSMEM_READ_BYTES,
    SYSMEM_READ_THROUGHPUT,
    SYSMEM_READ_TRANSACTIONS,
    SYSMEM_READ_UTILIZATION,
    SYSMEM_UTILIZATION,
    SYSMEM_WRITE_BYTES,
    SYSMEM_WRITE_THROUGHPUT,
    SYSMEM_WRITE_TRANSACTIONS,
    SYSMEM_WRITE_UTILIZATION,
    TENSOR_INT_FU_UTILIZATION,
    TENSOR_PRECISION_FU_UTILIZATION,
    TEX_CACHE_HIT_RATE,
    TEX_CACHE_THROUGHPUT,
    TEX_CACHE_TRANSACTIONS,
    TEX_FU_UTILIZATION,
    TEXTURE_LOAD_REQUESTS,
    TEX_UTILIZATION,
    UNIQUE_WARPS_LAUNCHED,
    WARP_EXECUTION_EFFICIENCY,
    WARP_NONPRED_EXECUTION_EFFICIENCY = 204,
    NVIDIA_COUNTERS_MAX,
};

extern const char* nvidia_counters_name[NVIDIA_COUNTERS_MAX];

// TODO: lowest supporting compute capability of each metric
extern char* nvidia_counters_compatibility[NVIDIA_COUNTERS_MAX];

// TODO: # pass for each metric. Is it device-specific?
extern char* nvidia_counters_num_pass[NVIDIA_COUNTERS_MAX];

// TODO: data type for each metric.
extern char* nvidia_counters_type[NVIDIA_COUNTERS_MAX];

#endif
